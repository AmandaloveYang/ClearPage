# Project: che Clearer Plugin

## Rules

### Coding Standards

- **Language**: Use **TypeScript** for all new code.
- **Component Style**: Prefer **functional components** and **hooks** over class components.
- **Typing**: Use proper **TypeScript types** for all variables, props, and functions.

### Style Guidelines

- **Code Style**: Follow **Airbnb React/JSX Style Guide**.
- **Indentation**: Use **2 spaces** for indentation.
- **Line Length**: Limit **max line length** to **100 characters**.
- **File Names**: Use **PascalCase** for component files (e.g., `CacheClearButton.tsx`) and **camelCase** for utility files.

### Best Practices

- **Responsive Design**: Implement responsive designs using **Tailwind CSS**.
- **Performance**: Use **React.memo()** for performance optimization when appropriate to prevent unnecessary re-renders.
- **Async Operations**: Prefer **async/await** over `.then()` for asynchronous operations, especially for clearing cache or loading data.
- **Browser API**: Leverage **browserâ€™s native API** (e.g., `chrome.browsingData` or `window.caches`) for cache management.
- **Error Handling**: Use proper error handling (e.g., try/catch blocks) for asynchronous tasks.

### Testing

- **Unit Tests**: Write unit tests for all new components and utilities.
- **Coverage**: Ensure at least **80% test coverage** for the plugin.
- **Testing Tools**: Use **Jest** and **React Testing Library** for testing UI and logic.
- **Mocking**: Mock browser APIs (e.g., `chrome.browsingData`) for tests involving cache clearing.

### Documentation

- **JSDoc**: Use **JSDoc comments** for all functions and components. Example:
  ```typescript
  /**
   * Clears the cache for the current page.
   * This action will only clear the cache for the active tab.
   * @returns Promise - Resolves once the cache is cleared.
   */
  ```
